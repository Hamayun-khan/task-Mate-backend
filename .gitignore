
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# server
node_modules/
.env
.vscode/

# Logs
logs
=======
# Node.js specific
node_modules/
# Explanation: The `node_modules` directory contains all the installed packages. It is large and can be regenerated using `npm install` or `yarn install`.

# Logs
logs/

*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
<<<<<<< HEAD
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# End of https://mrkandreev.name/snippets/gitignore-generator/#Node
=======
# Explanation: Log files are generated during runtime and are not needed in version control.

# Environment variables
.env
# Explanation: The `.env` file contains environment-specific variables, such as API keys and database credentials, which should be kept private.

# Build output
dist/
build/
# Explanation: These directories contain compiled or built files. They can be regenerated from the source code.

# Temporary files
*.tmp
*.temp
# Explanation: Temporary files are not needed in version control.

# OS-specific files
.DS_Store
Thumbs.db
# Explanation: These are system files created by macOS and Windows, respectively, and are not needed in version control.

# IDE-specific files
.vscode/
.idea/
*.sublime-workspace
*.sublime-project
# Explanation: These directories and files are specific to your development environment and should not be shared.

# Coverage reports
coverage/
# Explanation: Coverage reports are generated by testing tools and are not needed in version control.

# Miscellaneous
*.bak
*.swp
# Explanation: Backup and swap files are not needed in version control.

